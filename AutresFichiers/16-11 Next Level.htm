<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" lang="fr" xml:lang="fr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>16-11 Next Level</title>
  
  <script type="text/javascript" src="WebGl.js"></script>
  <script type="text/javascript" src="ShaderCouleursTextures.js"></script>
  <script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>
  <script type="text/javascript" src="Transformations.js"></script>
  <script type="text/javascript" src="Camera.js"></script>
  <script type="text/javascript" src="Sol.js"></script>
  <script type="text/javascript" src="MursTroués.js"></script>
  <script type="text/javascript" src="Creneaux.js"></script>   
  <script type="text/javascript" src="Tunnels.js"></script>  
  <script type="text/javascript" src="Ciel.js"></script>   
  <script type="text/javascript" src="NextLevel.js"></script>   
  <script type="text/javascript" src="Tornade.js"></script>  
  <script type="text/javascript" src="Textures.js"></script>
  <script type="text/javascript">

     var objgl = null;
     var objProgShaders = null;
     var objScene3D = null;

     var OBJ3D_SOL = 0;
	 var OBJ3D_MURS = 1;
	 var OBJ3D_CRENEAUX = 2;
	 var OBJ3D_TUNNELS = 3;
	 var OBJ3D_CIEL = 4;
	 var OBJ3D_NEXTLEVEL = 5;
	 var OBJ3D_TORNADE = 6;

	 var tabImages = ['Transparent.gif', 'Sol.jpg', 'Mur.jpg', 'Ciel.jpg', 'NextLevel.png'];
	 var TEX_TRANSPARENT = 0;
	 var TEX_SOL = 1;
	 var TEX_MUR = 2;
	 var TEX_CIEL = 3;
	 var TEX_NEXTLEVEL = 4;
           
    function demarrer() {
       var objCanvas = document.getElementById('monCanvas');
       objgl = initWebGL(objCanvas);  // Initialise le contexte WebGL
       objProgShaders = initShaders(objgl);
       objScene3D = initScene3D(objgl); // Créer la scène

       effacerCanevas(objgl); 
       dessiner(objgl, objProgShaders, objScene3D);
       animer();
    }

    // Un cycle d'animation	
    function animer() {
        // Requête pour le prochain cycle
        objCycleAnimation = requestAnimationFrame(animer);

        // Le cycle d'animation
        effacerCanevas(objgl);
        mettreAjourAnimation();
        dessiner(objgl, objProgShaders, objScene3D);
    }

    // Pour mettre à jour l'animation
    function mettreAjourAnimation() {
        tournerTornade();
        deplacerTornade();
    }

    function tournerTornade() {
        var obj3DTornade = objScene3D.tabObjets3D[OBJ3D_TORNADE];
        var fltAngleY = getAngleY(obj3DTornade.transformations) + 17;
        if (fltAngleY > 360) fltAngleY -= 360;
        setAngleY(fltAngleY, obj3DTornade.transformations);
    }
       
    function deplacerTornade() {
        var obj3DTornade = objScene3D.tabObjets3D[OBJ3D_TORNADE];
        if (obj3DTornade.binAutreDirection == null || obj3DTornade.binAutreDirection) {
            // Pour changer la direction de la tornade au hasard
            var intAngleHasard = Math.floor(Math.random() * 360);
            obj3DTornade.fltDeplacementX = Math.cos(intAngleHasard * Math.PI / 180) * 0.03;
            obj3DTornade.fltDeplacementZ = Math.sin(intAngleHasard * Math.PI / 180) * 0.03;
        }

        // La nouvelle position de la tornade
        var fltNouvellePositionX = getPositionX(obj3DTornade.transformations) + obj3DTornade.fltDeplacementX;
        var fltNouvellePositionZ = getPositionZ(obj3DTornade.transformations) + obj3DTornade.fltDeplacementZ;

        // S'assurer que la tornade ne dépasse pas les nurs
        var fltLimiteNord = -objScene3D.tabObjets3D[OBJ3D_MURS].fltProfondeur / 2 + obj3DTornade.fltProfondeur;
        var fltLimiteSud = objScene3D.tabObjets3D[OBJ3D_MURS].fltProfondeur / 2 - obj3DTornade.fltProfondeur;
        var fltLimiteOuest = -objScene3D.tabObjets3D[OBJ3D_MURS].fltLargeur / 2 + obj3DTornade.fltLargeur;
        var fltLimiteEst = objScene3D.tabObjets3D[OBJ3D_MURS].fltLargeur / 2 - obj3DTornade.fltLargeur;

        var binAucuneCollision = (fltNouvellePositionX > fltLimiteOuest) && (fltNouvellePositionX < fltLimiteEst) &&
                                 (fltNouvellePositionZ > fltLimiteNord) && (fltNouvellePositionZ < fltLimiteSud);

        if (binAucuneCollision) {
            // Déplacer dans la même direction
            setPositionX(fltNouvellePositionX, obj3DTornade.transformations);
            setPositionZ(fltNouvellePositionZ, obj3DTornade.transformations);
            // 1 chance sur 100 de changer de diection en cours de route
            obj3DTornade.binAutreDirection = Math.random() <= 0.01;
        }
        else { // Changement de direction à cause de la collision
            obj3DTornade.binAutreDirection = true;
        }
    }

     function initScene3D(objgl) {
         var objScene3D = new Object();
         var tabObjets3D = new Array();

		 // Mettre les textures dans la scène
		 objScene3D.textures = creerTextures(objgl, tabImages);
		 
         // Créer le sol
         var obj3DSol = creerObj3DSol(objgl, TEX_SOL);
         tabObjets3D.push(obj3DSol);

		 // Créer les murs
         var obj3DMurs = creerObj3DMurs(objgl, obj3DSol, TEX_MUR);
         tabObjets3D.push(obj3DMurs);
		 
		 // Créer les créneaux
         var obj3DCreneaux = creerObj3DCreneaux(objgl, obj3DMurs, TEX_MUR);
         tabObjets3D.push(obj3DCreneaux);

         // Créer les tunnels
         var obj3DTunnels = creerObj3DTunnels(objgl, obj3DMurs, TEX_MUR);
         tabObjets3D.push(obj3DTunnels);

		 // Créer le ciel
         var obj3DCiel = creerObj3DCiel(objgl, obj3DMurs, obj3DCreneaux, TEX_CIEL);
         tabObjets3D.push(obj3DCiel);

         // Créer le nextlevel
         var obj3DNextLevel = creerObj3DNextLevel(objgl, obj3DTunnels, TEX_NEXTLEVEL);
         tabObjets3D.push(obj3DNextLevel);

         // Créer la tornade
         var obj3DTornade = creerObj3DTornade(objgl, obj3DMurs, obj3DCreneaux, TEX_TRANSPARENT);
         tabObjets3D.push(obj3DTornade);
       
		 // Mettre les objets 3D sur la scène
         objScene3D.tabObjets3D = tabObjets3D;

         // La caméra
         var camera = creerCamera();
         setPositionsCameraXYZ([0, 0.5, obj3DMurs.fltProfondeur/2-0.1], camera);
         setCiblesCameraXYZ([0, 0.5, 0], camera);
         setOrientationsXYZ([0, 1, 0], camera);
         objScene3D.camera = camera;

         return objScene3D;
     }

     function dessiner(objgl, objProgShaders, objScene3D) {
         // La vue
         objgl.viewport(0, 0, objgl.drawingBufferWidth, objgl.drawingBufferHeight);

         // Matrice de projection
         var matProjection = mat4.create();
         var fltRapportCanevas = objgl.drawingBufferWidth / objgl.drawingBufferHeight;
         mat4.perspective(45, fltRapportCanevas, 0.01, 100, matProjection);

         // Relier la matrice aux shaders
         objgl.uniformMatrix4fv(objProgShaders.matProjection, false, matProjection);

         for (var i = 0; i < objScene3D.tabObjets3D.length; i++) {
             var vertex = objScene3D.tabObjets3D[i].vertex;
             var couleurs = objScene3D.tabObjets3D[i].couleurs;
             var texels = objScene3D.tabObjets3D[i].texels;
             var maillage = objScene3D.tabObjets3D[i].maillage;
             var transformations = objScene3D.tabObjets3D[i].transformations;

             // Matrice du modèle            
             var matModeleVue = mat4.create();
             mat4.identity(matModeleVue);

             // Placer la caméra sur la scène
             mat4.lookAt(getPositionsCameraXYZ(objScene3D.camera),
                         getCiblesCameraXYZ(objScene3D.camera),
                         getOrientationsXYZ(objScene3D.camera),
                         matModeleVue);

             // Appliquer les transformations sur le modèle 
             mat4.translate(matModeleVue, getPositionsXYZ(transformations));
             mat4.scale(matModeleVue, getEchellesXYZ(transformations));
             mat4.rotateX(matModeleVue, getAngleX(transformations) * Math.PI / 180);
             mat4.rotateY(matModeleVue, getAngleY(transformations) * Math.PI / 180);
             mat4.rotateZ(matModeleVue, getAngleZ(transformations) * Math.PI / 180);

             // Relier la matrice aux shaders
             objgl.uniformMatrix4fv(objProgShaders.matModeleVue, false, matModeleVue);

             if (maillage == null)
                 // Dessiner les sous-objets
                 for (var j = 0; j < vertex.length; j++) {

                     // Relier les vertex aux shaders
                     objgl.bindBuffer(objgl.ARRAY_BUFFER, vertex[j]);
                     objgl.vertexAttribPointer(objProgShaders.posVertex, 3, objgl.FLOAT, false, 0, 0);
                     var intNbVertex = (objgl.getBufferParameter(objgl.ARRAY_BUFFER, objgl.BUFFER_SIZE) / 4) / 3;

                     // Relier les couleurs aux shaders
                     objgl.bindBuffer(objgl.ARRAY_BUFFER, couleurs[j]);
                     objgl.vertexAttribPointer(objProgShaders.couleurVertex, 4, objgl.FLOAT, false, 0, 0);

                     // Activer la texture
                     objgl.activeTexture(objgl.TEXTURE0 + texels[j].intNoTexture);
                     objgl.bindTexture(objgl.TEXTURE_2D, objScene3D.textures[texels[j].intNoTexture]);

                     // Relier les texels aux shaders
                     objgl.bindBuffer(objgl.ARRAY_BUFFER, texels[j]);
                     objgl.vertexAttribPointer(objProgShaders.posTexel, 2, objgl.FLOAT, false, 0, 0);

                     // Relier le no de texture et le taux de couleur aux shaders                 
                     objgl.uniform1i(objProgShaders.noTexture, texels[j].intNoTexture);
                     objgl.uniform1f(objProgShaders.pcCouleurTexel, texels[j].pcCouleurTexel);

                     // Dessiner
                     objgl.drawArrays(vertex[j].typeDessin, 0, intNbVertex);
                 }
             else { // Dessiner le maillage

                 // Relier les vertex aux shaders
                 objgl.bindBuffer(objgl.ARRAY_BUFFER, vertex);
                 objgl.vertexAttribPointer(objProgShaders.posVertex, 3, objgl.FLOAT, false, 0, 0);

                 // Relier les couleurs aux shaders
                 objgl.bindBuffer(objgl.ARRAY_BUFFER, couleurs);
                 objgl.vertexAttribPointer(objProgShaders.couleurVertex, 4, objgl.FLOAT, false, 0, 0)

                 // Activer la texture
                 objgl.activeTexture(objgl.TEXTURE0 + texels.intNoTexture);
                 objgl.bindTexture(objgl.TEXTURE_2D, objScene3D.textures[texels.intNoTexture]);

                 // Relier les texels aux shaders
                 objgl.bindBuffer(objgl.ARRAY_BUFFER, texels);
                 objgl.vertexAttribPointer(objProgShaders.posTexel, 2, objgl.FLOAT, false, 0, 0);

                 // Relier le no de texture et le taux de couleur aux shaders                 
                 objgl.uniform1i(objProgShaders.noTexture, texels.intNoTexture);
                 objgl.uniform1f(objProgShaders.pcCouleurTexel, texels.pcCouleurTexel);

                 // Sélectionner le maillage qu'on va utiliser pour les triangles et les droites
                 objgl.bindBuffer(objgl.ELEMENT_ARRAY_BUFFER, maillage);

                 // Dessiner les triangles
                 objgl.drawElements(objgl.TRIANGLES, maillage.intNbTriangles * 3, objgl.UNSIGNED_SHORT, 0);
                 // Dessiner les droites à la suite des triangles
                 objgl.drawElements(objgl.LINES, maillage.intNbDroites * 2, objgl.UNSIGNED_SHORT, maillage.intNbTriangles * 2 * 3);
             }
         }
     }

    function effacerCanevas(objgl) {
      // Met la couleur d'effacement au noir et complétement opaque
      objgl.clearColor(0.0, 0.0, 0.0, 1.0);
      // Efface les couleurs et le buffer de profondeur.
      objgl.clear(objgl.COLOR_BUFFER_BIT|objgl.DEPTH_BUFFER_BIT);
    }

    function deplacerCamera() {
        var camera = objScene3D.camera;

        if (event.keyCode == 37 || event.keyCode == 39) {
            // 37:  Flèche-à-gauche; 39:Flèche-à-droite
            var fltX = getCibleCameraX(camera) - getPositionCameraX(camera);
            var fltZ = getCibleCameraZ(camera) - getPositionCameraZ(camera);
            var intDirection = (event.keyCode == 37) ? -1 : 1;
            var fltAngle = intDirection * Math.PI / 90; // Tourner 2 degrés
            var fltXPrime = fltX * Math.cos(fltAngle) - fltZ * Math.sin(fltAngle);
            var fltZPrime = fltX * Math.sin(fltAngle) + fltZ * Math.cos(fltAngle);
            setCibleCameraX(getPositionCameraX(camera) + fltXPrime, camera);
            setCibleCameraZ(getPositionCameraZ(camera) + fltZPrime, camera);
        }
        else 
        if (event.keyCode == 38 || event.keyCode == 40) {
            // 38:  Flèche-en-haut; 40:Flèche-en-bas
            var fltX = getCibleCameraX(camera) - getPositionCameraX(camera);
            var fltZ = getCibleCameraZ(camera) - getPositionCameraZ(camera);
            var fltRayon = Math.sqrt(fltX * fltX + fltZ * fltZ);
            var intDirection = (event.keyCode == 38) ? 1 : -1;

            var fltXPrime = intDirection * 0.2 * Math.cos(Math.acos(fltX / fltRayon));
            var fltZPrime = intDirection * 0.2 * Math.sin(Math.asin(fltZ / fltRayon));

            // Positions de la caméra
            var fltXCamera = getPositionX(camera) + fltXPrime;
            var fltZCamera = getPositionZ(camera) + fltZPrime;

            // Limites du mur
            var fltLimiteOuest = -objScene3D.tabObjets3D[OBJ3D_MURS].fltLargeur / 2 + 0.1;
            var fltLimiteEst = objScene3D.tabObjets3D[OBJ3D_MURS].fltLargeur / 2 - 0.1;
            var fltLimiteNord = -objScene3D.tabObjets3D[OBJ3D_MURS].fltProfondeur / 2 + 0.1;
            var fltLimiteSud = objScene3D.tabObjets3D[OBJ3D_MURS].fltProfondeur / 2 - 0.1;
            
            var binAucuneCollision = (fltXCamera > fltLimiteOuest) && (fltXCamera < fltLimiteEst) &&
                                     (fltZCamera > fltLimiteNord) && (fltZCamera < fltLimiteSud);
            var binFondTunnel = false;

            if (!binAucuneCollision)  {
                // Vérifier si le mur NORD est troué
                if ((fltZCamera <= fltLimiteNord) && objScene3D.tabObjets3D[OBJ3D_MURS].tabAUntrou[NORD]) {
                    // Vérifier s'il est devant le trou du mur NORD
                    fltLimiteOuest2 = objScene3D.tabObjets3D[OBJ3D_MURS].fltLargeur * (-1/2 + objScene3D.tabObjets3D[OBJ3D_MURS].tabDebutRelTrou[NORD]) + 0.1;
                    fltLimiteEst2 = fltLimiteOuest2 + objScene3D.tabObjets3D[OBJ3D_MURS].fltLargeurTrou - 0.2;
                    binAucuneCollision = (fltXCamera > fltLimiteOuest2) && (fltXCamera < fltLimiteEst2);
                    // Vérifier s'il est au fond du tunnel
                    binFondTunnel = fltZCamera <= fltLimiteNord - objScene3D.tabObjets3D[OBJ3D_TUNNELS].fltProfondeur;
                }   
                // Vérifier si le mur SUD est troué
                else if ((fltZCamera >= fltLimiteSud) && objScene3D.tabObjets3D[OBJ3D_MURS].tabAUntrou[SUD]) {
                    // Vérifier s'il est devant le trou du mur SUD
                    fltLimiteEst2 = objScene3D.tabObjets3D[OBJ3D_MURS].fltLargeur * (1 / 2 - objScene3D.tabObjets3D[OBJ3D_MURS].tabDebutRelTrou[SUD]) - 0.1;
                    fltLimiteOuest2 = fltLimiteEst2 - objScene3D.tabObjets3D[OBJ3D_MURS].fltLargeurTrou + 0.2;        
                    binAucuneCollision = (fltXCamera > fltLimiteOuest2) && (fltXCamera < fltLimiteEst2);
                    // Vérifier s'il est au fond du tunnel
                    binFondTunnel = fltZCamera >= fltLimiteSud + objScene3D.tabObjets3D[OBJ3D_TUNNELS].fltProfondeur;
                }   
                // Vérifier si le mur EST est troué
                else if ((fltXCamera >= fltLimiteEst) && objScene3D.tabObjets3D[OBJ3D_MURS].tabAUntrou[EST]) {
                    // Vérifier s'il est devant le trou du mur EST
                    fltLimiteNord2 = objScene3D.tabObjets3D[OBJ3D_MURS].fltProfondeur * (-1/2 + objScene3D.tabObjets3D[OBJ3D_MURS].tabDebutRelTrou[EST]) + 0.1;
                    fltLimiteSud2 = fltLimiteNord2 + objScene3D.tabObjets3D[OBJ3D_MURS].fltLargeurTrou - 0.2;
                    binAucuneCollision = (fltZCamera > fltLimiteNord2) && (fltZCamera < fltLimiteSud2);
                    // Vérifier s'il est au fond du tunnel
                    binFondTunnel = fltXCamera >= fltLimiteEst + objScene3D.tabObjets3D[OBJ3D_TUNNELS].fltProfondeur;
                }   
                // Vérifier si le mur OUEST est troué
                else if ((fltXCamera <= fltLimiteOuest) && objScene3D.tabObjets3D[OBJ3D_MURS].tabAUntrou[OUEST]) {
                    // Vérifier s'il est devant le trou du mur OUEST
                    fltLimiteSud2 = objScene3D.tabObjets3D[OBJ3D_MURS].fltProfondeur * (1 / 2 - objScene3D.tabObjets3D[OBJ3D_MURS].tabDebutRelTrou[OUEST]) - 0.1;
                    fltLimiteNord2 = fltLimiteSud2 - objScene3D.tabObjets3D[OBJ3D_MURS].fltLargeurTrou + 0.2;
                    binAucuneCollision = (fltZCamera > fltLimiteNord2) && (fltZCamera < fltLimiteSud2);
                    // Vérifier s'il est au fond du tunnel
                    binFondTunnel = fltXCamera <= fltLimiteOuest - objScene3D.tabObjets3D[OBJ3D_TUNNELS].fltProfondeur;
                }   
            }
                        
            if (binFondTunnel) // Passer à un autre niveau
                objScene3D = initScene3D(objgl);
            else if (binAucuneCollision) { // Déplacer la caméra
                setCibleCameraX(getCibleCameraX(camera) + fltXPrime, camera);
                setCibleCameraZ(getCibleCameraZ(camera) + fltZPrime, camera);
                setPositionCameraX(getPositionCameraX(camera) + fltXPrime, camera);
                setPositionCameraZ(getPositionCameraZ(camera) + fltZPrime, camera);
            }
            else { // Pour longer les murs s'il y a une collision
                if (fltXCamera <= fltLimiteOuest || fltXCamera >= fltLimiteEst) {
                    // On longe le mur ouest ou est 
                    fltZPrime = 0.2 * ((fltZ < 0) ? -1 : 1); fltXPrime = 0.0;
                }
                else { // On longe le mur sud ou nord
                    fltXPrime = 0.2 * ((fltX < 0) ? -1 : 1); fltZPrime = 0.0;
                }

                // Nouvelles positions de la caméra
                fltXCamera = getPositionX(camera) + fltXPrime;
                fltZCamera = getPositionZ(camera) + fltZPrime;
                var binAucuneCollision = (fltXCamera > fltLimiteOuest) && (fltXCamera < fltLimiteEst) &&
                                         (fltZCamera > fltLimiteNord) && (fltZCamera < fltLimiteSud);
                // Longer le mur s'il ne rencontre pas un nouveau mur
                if (binAucuneCollision) {
                    setCibleCameraX(getCibleCameraX(camera) + fltXPrime, camera);
                    setCibleCameraZ(getCibleCameraZ(camera) + fltZPrime, camera);
                    setPositionCameraX(getPositionCameraX(camera) + fltXPrime, camera);
                    setPositionCameraZ(getPositionCameraZ(camera) + fltZPrime, camera);
                }
            }
        }
     }
  
</script>
</head>

<body onload="demarrer()"> 
	<canvas id="monCanvas" width="640" height="640" tabIndex="1", onkeydown="deplacerCamera(); return false">
		Votre navigateur ne supporte pas la balise canvas
	</canvas>


</body>
</html>