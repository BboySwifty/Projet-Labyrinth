<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" lang="fr" xml:lang="fr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Projet Final par Alain Abboud, Francis Chartrand et Yacine Sahli</title>

  <script type="text/javascript" src="WebGl.js"></script>
  <script type="text/javascript" src="ShaderCouleursTextures.js"></script>
  <script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>
  <script type="text/javascript" src="Transformations.js"></script>
  <script type="text/javascript" src="Camera.js"></script>
  <script type="text/javascript" src="Sol.js"></script>
  <script type="text/javascript" src="Murs.js"></script>
  <script type="text/javascript" src="Ciel.js"></script>
  <script type="text/javascript" src="Textures.js"></script>
    <script type="text/javascript" src="Niveau.js"></script>
  <script type="text/javascript">

     var objgl = null;
     var objProgShaders = null;
     var objScene3D = null;

     var OBJ3D_SOL = 0;
	 var OBJ3D_MURS = 1;
	 var OBJ3D_CRENEAUX = 2;
	 var OBJ3D_TUNNELS = 3;
	 var OBJ3D_CIEL = 4;

	 var tabImages = ['Transparent.gif', 'gazon3.png', 'mur2.png', 'Ciel.jpg'];
	 var TEX_TRANSPARENT = 0;
	 var TEX_SOL = 1;
	 var TEX_MUR = 2;
	 var TEX_CIEL = 3;

   var tabKeys = new Array();
   var binMouvement = false;
   var intVitesse = 0.4;
   var t = null;

    function demarrer() {
       var objCanvas = document.getElementById('monCanvas');
       objgl = initWebGL(objCanvas);  // Initialise le contexte WebGL
       objProgShaders = initShaders(objgl);
       objScene3D = initScene3D(objgl); // Créer la scène

       effacerCanevas(objgl);
       dessiner(objgl, objProgShaders, objScene3D);
   }

     function initScene3D(objgl) {
         var objScene3D = new Object();
         var tabObjets3D = new Array();


         // Mettre les textures dans la scène
         objScene3D.textures = creerTextures(objgl, tabImages);
        // objScene3D.textures = creerTextures(objgl, ['Transparent.gif', 'mur1.png']);

        var tabNiveau = new Array(31);

         for (var i = 0; i < 31; i++) {
             tabNiveau[i] = new Array(31);
         }

         tabNiveau = [
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
         ];

         // Mettre les objets 3D sur la scène
         objScene3D.tabObjets3D = tabObjets3D;

         // Créer le sol
         var obj3DSol = creerObj3DSol(objgl, TEX_SOL);
         tabObjets3D.push(obj3DSol);

		     // Créer les murs
         var obj3DMurs = creerObj3DMurs(objgl, obj3DSol, TEX_MUR);
         tabObjets3D.push(obj3DMurs);

		     // Créer le ciel
         var obj3DCiel = creerObj3DCiel(objgl, obj3DMurs, TEX_CIEL);
         tabObjets3D.push(obj3DCiel);

        for (var i = 0; i < 31; i++) {
            for (var j = 0; j < 31; j++) {
                //Briques
                if (tabNiveau[i][j] == 1) {
                    // Créer 1 cube

                    var objet3D = new Object();
                    objet3D.vertex = creerCube(objgl);
                    objet3D.couleurs = creerCouleursCube(objgl);
                    objet3D.maillage = creerMaillageCube(objgl);
                    objet3D.texels = creerTexelsCube(objgl);
                    objet3D.transformations = creerTransformations();
                    setPositionsXYZ([j, 1, i], objet3D.transformations);
                    tabObjets3D.push(objet3D);

                }
            }
        }

		 // Mettre les objets 3D sur la scène
         objScene3D.tabObjets3D = tabObjets3D;

         // La caméra
         var camera = creerCamera();
         setPositionsCameraXYZ([6, 0.5, 6], camera);
         setCiblesCameraXYZ([3, 0.5, 3], camera);
         setOrientationsXYZ([0, 1, 0], camera);

         // Vue aérienne
         /*setPositionsCameraXYZ([15.5, 39, 15.5], camera);
         setCiblesCameraXYZ([15.5, 0, 15.5], camera);
         setOrientationsXYZ([0, 0, 1], camera);*/

         objScene3D.camera = camera;

         return objScene3D;
     }

     function dessiner(objgl, objProgShaders, objScene3D) {
         // La vue
         objgl.viewport(0, 0, objgl.drawingBufferWidth, objgl.drawingBufferHeight);

         // Matrice de projection
         var matProjection = mat4.create();
         var fltRapportCanevas = objgl.drawingBufferWidth / objgl.drawingBufferHeight;
         mat4.perspective(45, fltRapportCanevas, 0.01, 100, matProjection);

         // Relier la matrice aux shaders
         objgl.uniformMatrix4fv(objProgShaders.matProjection, false, matProjection);

         for (var i = 0; i < objScene3D.tabObjets3D.length; i++) {
             var vertex = objScene3D.tabObjets3D[i].vertex;
             var couleurs = objScene3D.tabObjets3D[i].couleurs;
             var texels = objScene3D.tabObjets3D[i].texels;
             var maillage = objScene3D.tabObjets3D[i].maillage;
             var transformations = objScene3D.tabObjets3D[i].transformations;

             // Matrice du modèle

             var matModeleVue = mat4.create();
             mat4.identity(matModeleVue);

             // Placer la caméra sur la scène
             mat4.lookAt(getPositionsCameraXYZ(objScene3D.camera),
                         getCiblesCameraXYZ(objScene3D.camera),
                         getOrientationsXYZ(objScene3D.camera),
                         matModeleVue);

             // Appliquer les transformations sur le modèle
             mat4.translate(matModeleVue, getPositionsXYZ(transformations));
             mat4.scale(matModeleVue, getEchellesXYZ(transformations));
             mat4.rotateX(matModeleVue, getAngleX(transformations) * Math.PI / 180);
             mat4.rotateY(matModeleVue, getAngleY(transformations) * Math.PI / 180);
             mat4.rotateZ(matModeleVue, getAngleZ(transformations) * Math.PI / 180);

             // Relier la matrice aux shaders
             objgl.uniformMatrix4fv(objProgShaders.matModeleVue, false, matModeleVue);

             if (maillage == null)
                 // Dessiner les sous-objets
                 for (var j = 0; j < vertex.length; j++) {

                     // Relier les vertex aux shaders
                     objgl.bindBuffer(objgl.ARRAY_BUFFER, vertex[j]);
                     objgl.vertexAttribPointer(objProgShaders.posVertex, 3, objgl.FLOAT, false, 0, 0);
                     var intNbVertex = (objgl.getBufferParameter(objgl.ARRAY_BUFFER, objgl.BUFFER_SIZE) / 4) / 3;

                     // Relier les couleurs aux shaders
                     objgl.bindBuffer(objgl.ARRAY_BUFFER, couleurs[j]);
                     objgl.vertexAttribPointer(objProgShaders.couleurVertex, 4, objgl.FLOAT, false, 0, 0);

                     // Activer la texture
                     objgl.activeTexture(objgl.TEXTURE0 + texels[j].intNoTexture);
                     objgl.bindTexture(objgl.TEXTURE_2D, objScene3D.textures[texels[j].intNoTexture]);

                     // Relier les texels aux shaders
                     objgl.bindBuffer(objgl.ARRAY_BUFFER, texels[j]);
                     objgl.vertexAttribPointer(objProgShaders.posTexel, 2, objgl.FLOAT, false, 0, 0);

                     // Relier le no de texture et le taux de couleur aux shaders
                     objgl.uniform1i(objProgShaders.noTexture, texels[j].intNoTexture);
                     objgl.uniform1f(objProgShaders.pcCouleurTexel, texels[j].pcCouleurTexel);

                     // Dessiner
                     objgl.drawArrays(vertex[j].typeDessin, 0, intNbVertex);
                 }
             else { // Dessiner le maillage

                 // Relier les vertex aux shaders
                 objgl.bindBuffer(objgl.ARRAY_BUFFER, vertex);
                 objgl.vertexAttribPointer(objProgShaders.posVertex, 3, objgl.FLOAT, false, 0, 0);

                 // Relier les couleurs aux shaders
                 objgl.bindBuffer(objgl.ARRAY_BUFFER, couleurs);
                 objgl.vertexAttribPointer(objProgShaders.couleurVertex, 4, objgl.FLOAT, false, 0, 0)

                 // Activer la texture
                 objgl.activeTexture(objgl.TEXTURE0 + texels.intNoTexture);
                 objgl.bindTexture(objgl.TEXTURE_2D, objScene3D.textures[texels.intNoTexture]);

                 // Relier les texels aux shaders
                 objgl.bindBuffer(objgl.ARRAY_BUFFER, texels);
                 objgl.vertexAttribPointer(objProgShaders.posTexel, 2, objgl.FLOAT, false, 0, 0);

                 // Relier le no de texture et le taux de couleur aux shaders
                 objgl.uniform1i(objProgShaders.noTexture, texels.intNoTexture);
                 objgl.uniform1f(objProgShaders.pcCouleurTexel, texels.pcCouleurTexel);

                 // Sélectionner le maillage qu'on va utiliser pour les triangles et les droites
                 objgl.bindBuffer(objgl.ELEMENT_ARRAY_BUFFER, maillage);

                 // Dessiner les triangles
                 objgl.drawElements(objgl.TRIANGLES, maillage.intNbTriangles * 3, objgl.UNSIGNED_SHORT, 0);
                 // Dessiner les droites à la suite des triangles
                 objgl.drawElements(objgl.LINES, maillage.intNbDroites * 2, objgl.UNSIGNED_SHORT, maillage.intNbTriangles * 2 * 3);
             }
         }
     }

    function effacerCanevas(objgl) {
      // Met la couleur d'effacement au noir et complétement opaque
      objgl.clearColor(0.0, 0.0, 0.0, 1.0);
      // Efface les couleurs et le buffer de profondeur.
      objgl.clear(objgl.COLOR_BUFFER_BIT|objgl.DEPTH_BUFFER_BIT);
    }

    function deplacementKeyDown(){
      tabKeys[event.keyCode] = true; // index = keyCode du bouton et true = keydown
      if(!binMouvement){
        deplacerCamera();
      }
    }

    function deplacementKeyUp(){
      tabKeys[event.keyCode] = false; // false = keyup
      binMouvement = false;
      clearTimeout(deplacerCamera);
    }

    function deplacerCamera() {
         var camera = objScene3D.camera;
         binMouvement = true;

         if (tabKeys[37] || tabKeys[39]) {
             // 37:  Flèche-à-gauche; 39:Flèche-à-droite
             var fltX = getCibleCameraX(camera) - getPositionCameraX(camera);
             var fltZ = getCibleCameraZ(camera) - getPositionCameraZ(camera);
             var intDirection = (tabKeys[37]) ? -1 : 1;
             var fltAngle = intDirection * Math.PI / 135; // Tourner 1.5 degrés
             var fltXPrime = fltX * Math.cos(fltAngle) - fltZ * Math.sin(fltAngle);
             var fltZPrime = fltX * Math.sin(fltAngle) + fltZ * Math.cos(fltAngle);
             setCibleCameraX(getPositionCameraX(camera) + fltXPrime, camera);
             setCibleCameraZ(getPositionCameraZ(camera) + fltZPrime, camera);
         }
         else
             if (tabKeys[38] || tabKeys[40]) {
                 // 38:  Flèche-en-haut; 40:Flèche-en-bas
                 var fltX = getCibleCameraX(camera) - getPositionCameraX(camera);
                 var fltZ = getCibleCameraZ(camera) - getPositionCameraZ(camera);
                 var fltRayon = Math.sqrt(fltX * fltX + fltZ * fltZ);
                 var intDirection = (tabKeys[38]) ? 1 : -1;

                 var fltXPrime = intDirection * intVitesse * 0.2 * Math.cos(Math.acos(fltX / fltRayon));
                 var fltZPrime = intDirection * intVitesse * 0.2 * Math.sin(Math.asin(fltZ / fltRayon));

                 // Positions de la caméra
                 var fltXCamera = getPositionX(camera) + fltXPrime;
                 var fltZCamera = getPositionZ(camera) + fltZPrime;

                 // Limites du mur
                 var fltLimiteOuest = -objScene3D.tabObjets3D[OBJ3D_MURS].fltLargeur + 0.1;
                 var fltLimiteEst = objScene3D.tabObjets3D[OBJ3D_MURS].fltLargeur - 0.1;
                 var fltLimiteNord = -objScene3D.tabObjets3D[OBJ3D_MURS].fltProfondeur + 0.1;
                 var fltLimiteSud = objScene3D.tabObjets3D[OBJ3D_MURS].fltProfondeur - 0.1;

                 var binAucuneCollision = (fltXCamera > fltLimiteOuest) && (fltXCamera < fltLimiteEst) &&
                                          (fltZCamera > fltLimiteNord) && (fltZCamera < fltLimiteSud);


                 // Déplacer la caméra s'il n'y a pas de collision
                 if (binAucuneCollision) {
                     setCibleCameraX(getCibleCameraX(camera) + fltXPrime, camera);
                     setCibleCameraZ(getCibleCameraZ(camera) + fltZPrime, camera);
                     setPositionCameraX(getPositionCameraX(camera) + fltXPrime, camera);
                     setPositionCameraZ(getPositionCameraZ(camera) + fltZPrime, camera);
                 }
                 else { // Pour longer les murs s'il y a une collision
                     if (fltXCamera <= fltLimiteOuest || fltXCamera >= fltLimiteEst) {
                         // On longe le mur ouest ou est
                         fltZPrime = intVitesse * 0.2 * ((fltZ < 0) ? -1 : 1); fltXPrime = 0.0;
                     }
                     else { // On longe le mur sud ou nord
                         fltXPrime = intVitesse * 0.2 * ((fltX < 0) ? -1 : 1); fltZPrime = 0.0;
                     }

                     // Nouvelles positions de la caméra
                     fltXCamera = getPositionX(camera) + fltXPrime;
                     fltZCamera = getPositionZ(camera) + fltZPrime;
                     var binAucuneCollision = (fltXCamera > fltLimiteOuest) && (fltXCamera < fltLimiteEst) &&
                                              (fltZCamera > fltLimiteNord) && (fltZCamera < fltLimiteSud);
                     // Longer le mur s'il ne rencontre pas un nouveau mur
                     if (binAucuneCollision) {
                         setCibleCameraX(getCibleCameraX(camera) + fltXPrime, camera);
                         setCibleCameraZ(getCibleCameraZ(camera) + fltZPrime, camera);
                         setPositionCameraX(getPositionCameraX(camera) + fltXPrime, camera);
                         setPositionCameraZ(getPositionCameraZ(camera) + fltZPrime, camera);
                     }
                 }
             }
        effacerCanevas(objgl);
        dessiner(objgl, objProgShaders, objScene3D);

        setTimeout(deplacerCamera, 10);
     }

</script>
</head>

<body onload="demarrer()">
  <p align="center">
  	<canvas id="monCanvas" width="640" height="640" tabIndex="1" onkeydown="deplacementKeyDown()" onkeyup="deplacementKeyUp()">
  		Votre navigateur ne supporte pas la balise canvas
  	</canvas>
  </p>


</body>
</html>
